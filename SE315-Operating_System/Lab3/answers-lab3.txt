Lab3 - Questions

曹金坤 515260910022

1. What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

Answer: Not all interruption types need an error code, so they need to be handled respectively.


2. Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint 's code says int $14 . Why should this produce interrupt vector 13? What happens if the kernel actually allows softint 's int $14 instruction to invoke the kernel's page fault handler (which is interrupt vector 14)?

Answer: The error codes applied in SETGATE are defined in a system-level, which we could not modified. The trap 13 is caused because of the permission defined. Hence, to trigger int $14, we need to modify the permission bit to make it addressable in user mode. However, this brings new security concerns that user can allocate memory without being checked in kernel mode. Harm program may use this feature to run out of all available memory.

3. The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init ). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?

Answer: This is mainly caused by the defined permission under user mode. To kill the issue, we can set the permission bit 3 as mentioned in Question 2. 

4. What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?

Answer: The mechanism is created out of security consideration that only the privileged users (in kernel mode) can do sensitive operations, such as memory allocations. Some other operations with lower risk and can be well recovered by higher-privileged user can be made permitted for user mode.
